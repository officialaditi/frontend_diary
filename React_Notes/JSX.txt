                                  All about JSX:-


1) What is JSX?
==> JSX (JavaScript XML) is a syntax extension for JavaScript that looks similar to HTML but works 
    inside JavaScript.
==> JSX allows us to write HTML-like code within JavaScript files, making it easier to create and 
    visualize UI components.

2) Why Use JSX?
==> Readability: JSX improves code readability by keeping UI structure and JavaScript logic in the same file.
==> Performance Optimization: JSX is compiled into optimized JavaScript code (using Babel) before execution.
==> Prevents Injection Attacks: JSX escapes values before rendering, preventing security vulnerabilities like 
    ss-Site Scripting (XSS).

3) Writing JSX - Basic Syntax
==> JSX closely resembles HTML but has some key differences. Let’s explore with examples.
--> Basic JSX Example:-
    const element = <h1>Hello, JSX!</h1>;
    ReactDOM.createRoot(document.getElementById('root')).render(element);
==> Here, <h1>Hello, JSX!</h1> is JSX, which will be converted to JavaScript during compilation.

4) JSX Rules
JSX follows some strict rules that differ slightly from HTML.
a) Single Parent Element:- >> JSX must return a single root element. 
                           >> You can wrap multiple elements inside a div or a React Fragment.
   CORRECT WAY:- 
   example:-
   *)  Normal using single parent <div>
    return (
    <div>
    <h1>Title</h1>
    <p>Description</p>
    </div>
    );

   *)  using Fragment <></>
   return (
    <>
    <h1>Title</h1>
    <p>Description</p>
    </>
    ); 

    INCORRECT:- 
    return (
    <h1>Title</h1>
    <p>Description</p>
     );  // This will cause an error because it has multiple root elements.
     
b) JavaScript Expressions in JSX (Using {}):- >> You can embed JavaScript expressions inside JSX using 
                                                 curly braces {}.
   example:- 
   const name = "Alice";
   const element = <h1>Hello, {name}!</h1>; // Output: Hello, Alice! 
   ===> You can also use expressions like:
   const num = 10;
   return <p>The sum is {num + 5}</p>;  // Output: The sum is 15                                             

c)  Class Attribute → className 
Since class is a reserved keyword in JavaScript, JSX uses className instead.
Example:-  CORRECT WAY TO WRITE
const element = <h1 className="heading">Hello JSX</h1>;   

Example:-  INCORRECT WAY TO WRITE
const element = <h1 class="heading">Hello JSX</h1>; // This will cause an error.

d) Self-Closing Tags:- 
Some tags in JSX (like <img>, <input>, <br>) must be self-closed.

e) Inline Styles in JSX:- >> Instead of using CSS strings, JSX styles are written as JavaScript objects.
example:-
const headingStyle = { color: "blue", fontSize: "20px" };
const element = <h1 style={headingStyle}>Styled Text</h1>;

or

<h1 style={{ color: "red", backgroundColor: "yellow" }}>Hello JSX</h1>;

5) JSX with Components:- 

JSX is mostly used inside React functional or class components.

a) Functional Component using JSX:-
function Welcome() {
  return <h1>Welcome to React JSX!</h1>;
}

b) Class Component using JSX:- 
class Welcome extends React.Component {
  render() {
    return <h1>Welcome to React JSX!</h1>;
  }
}

6) JSX Compilation (Behind the Scenes)
JSX is not directly understood by browsers. Babel compiles JSX into plain JavaScript using React.createElement().
example:- const element = <h1>Hello, JSX!</h1>;

example:- Gets compiled into:
const element = React.createElement("h1", null, "Hello, JSX!");
This is why JSX is just syntactic sugar over React.createElement().

7) JSX Best Practices
✅ Use fragments (<>...</>) instead of unnecessary <div> wrappers
✅ Use className instead of class
✅ Use {} for JavaScript expressions
✅ Provide unique key when mapping lists
✅ Use arrow functions for cleaner code

