
ðŸ“Œ  synchronous:-

>> JavaScript is synchronous by default, meaning it executes code line by line in the order 
   it appears in the program. If one line of code is executing, the next line will not run 
   until the previous one is finished. This is known as blocking execution.

example:- 
console.log("First");
console.log("Second");
console.log("Third");

This will output:
First
Second
Third

However, JavaScript can also handle asynchronous operations, like network requests, timers, 
and event handling, without blocking the rest of the code. This is where concepts like 
callbacks, promises, and async/await come into play.

ðŸ“Œ  asynchronous:- 

>> Asynchronous programming in JavaScript means that certain operations, like fetching data 
   from a server, reading files, or waiting for a timer, don't block the rest of the code from 
   executing while they are happening. Instead of waiting for these operations to finish before 
   moving on to the next line of code, JavaScript continues executing other tasks, and once the 
   asynchronous operation is completed, it "notifies" JavaScript to handle the result.

>> Why Use Asynchronous Code?
    -> Efficiency: It allows your program to handle other tasks while waiting for long-running 
   operations (e.g., network requests, file I/O).
    -> Avoid Freezing the Application: Without async behavior, your application might freeze 
   (or become unresponsive) while it waits for tasks like fetching data.
  
ðŸ“Œ Key Points of Asynchronous Programming:

ðŸ”° Non-blocking: Asynchronous operations allow other code to run while waiting for an 
   operation to finish.

ðŸ”° Callback functions: Asynchronous tasks often rely on callback functions that are called 
   once the operation is complete.

ðŸ”° Promises: A more modern approach to handle asynchronous operations that can either resolve 
   (successful) or reject (failure) a task.

ðŸ”° Async/Await: A syntax introduced in ES8 to make working with Promises easier and more 
   readable  


                                       Recap explanation:-

 let have an recap of what and how sychronous programming works

consoling the 1,2,3 line by line as we know js work synchronously means the code get executed
line by line after each line

// console.log('one');
// console.log('two');
// console.log('three');

 yes we got the output like:- one, two, three synchoronously line by line

what about asynchronous programming then?? so like here the agar humare code 5 line ka and usme
1 line sirf console.log ahi, 2 line bhi same console hai, 3 like ek api call karke data la rahi 
hai toh woh 2 sec or 5 sec ka time le rahi hai which is an delay because of which hamara dusra
code bhi run nhi honga kounsa line 4 and 5 if we do this in synchronous programming, toh yaha pe
hun asynchronous programming karenge means api ka code side mai run honga and usake neche ke code 
line number 4,5 ko bhi run karenge taki woh hamara code stoop na ho and website mai delay na ho woh 
kesa karenge hum??

lets see an example with setTimeout(); 
setTimeout => execute the other function or an function when the time we have decided is expire

 function hello () {
     console.log('Saying Hello...')
 }

 let say we want to execute an function hello after 2 sec so we will give it to setTimeout();
 setTimeout(hello, 2000);  // we give time in milliseconds => 2s = 2000 miliseconds

so now the function will run after the 2 second

we can create an function directly inside the setTimeout using the arrow function.


console.log('hello 1');
console.log('hello 2');
console.log('hello 3');

setTimeout(() => {
    console.log('Hey AditiðŸ‘‹')
}, 4000);

console.log('hello 4');
console.log('hello 5');

so now here our code doesn't wait for the setTimout() to complete then , to print hello4, 
and hello5 but rather than waiting he print the other console and after the 4sec he prints 
the 'Hey Aditi'